#
# SPDX-FileCopyrightText: 2021 Splunk, Inc. <sales@splunk.com>
# SPDX-License-Identifier: LicenseRef-Splunk-8-2021
#
#

"""
This file contains certain ignores for certain linters.

* isort ignores:
- isort: skip = Particular import must be the first import.

* flake8 ignores:
- noqa: F401 -> Def = module imported but unused
    Reason for ignoring = This is necessary as it contains adding a path to sys.path
- noqa: E501 -> Def = Line is too long
    Reason for ignoring = The code is written in a dictionary key named "code"

* pylint ignores:
- pylint: disable=E1101 -> Def = Module has no member
    Reason for ignoring = Line of code was part of a template.
"""

import import_declare_test  # isort: skip # noqa: F401

import sys

import input_module_sfdc_object as input_module
import modinput_wrapper.base_modinput
from splunklib import modularinput as smi

"""
    Do not edit this file!!!
    This file is generated by Add-on builder automatically.
    Add your modular input logic to file input_module_sfdc_object.py
"""


class ModInputsfdc_object(modinput_wrapper.base_modinput.BaseModInput):
    def __init__(self):
        if "use_single_instance_mode" in dir(input_module):
            use_single_instance = (
                input_module.use_single_instance_mode()  # pylint: disable=E1101
            )
        else:
            use_single_instance = False
        super(ModInputsfdc_object, self).__init__(
            "splunk_ta_salesforce", "sfdc_object", use_single_instance
        )
        self.global_checkbox_fields = None

    def get_scheme(self):
        """overloaded splunklib modularinput method"""
        scheme = super(ModInputsfdc_object, self).get_scheme()
        scheme.title = "Salesforce Object"
        scheme.description = ""
        scheme.use_external_validation = True
        scheme.streaming_mode_xml = True

        scheme.add_argument(
            smi.Argument("name", title="Name", description="", required_on_create=True)
        )

        """
        For customized inputs, hard code the arguments here to hide argument detail from users.
        For other input types, arguments should be get from input_module. Defining new input types could be easier.
        """
        scheme.add_argument(
            smi.Argument(
                "account",
                title="Salesforce Account",
                description="",
                required_on_create=True,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "object",
                title="Object",
                description="The name of the object to query for.",
                required_on_create=True,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "object_fields",
                title="Object Fields",
                description="Object fields from which to collect data. Delimit multiple fields using comma (,).",
                required_on_create=True,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "order_by",
                title="Order By",
                description="The datetime field by which to query results in ascending order for indexing.",
                required_on_create=True,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "start_date",
                title="Query Start Date",
                description=(
                    "The datetime after which to query and index records, in this format: "
                    '"YYYY-MM-DDThh:mm:ss.000z".Defaults to 90 days earlier from now.'
                ),
                required_on_create=False,
                required_on_edit=False,
            )
        )
        scheme.add_argument(
            smi.Argument(
                "limit",
                title="Limit",
                description="The maximum number of results returned by the query.",
                required_on_create=False,
                required_on_edit=False,
            )
        ),
        scheme.add_argument(
            smi.Argument(
                "token",
                title="token",
                description="Deprecated field",
                required_on_create=False,
                required_on_edit=False,
            )
        ),
        scheme.add_argument(
            smi.Argument(
                "endpoint",
                title="endpoint",
                description="Deprecated field",
                required_on_create=False,
                required_on_edit=False,
            )
        )
        return scheme

    def get_app_name(self):
        return "Splunk_TA_salesforce"

    def validate_input(self, definition):
        """validate the input stanza"""
        input_module.validate_input(self, definition)

    def collect_events(self, ew):
        """write out the events"""
        self.logger.debug("Starting from root.")
        input_module.collect_events(self, ew)

    def get_account_fields(self):
        account_fields = []
        account_fields.append("account")
        return account_fields

    def get_checkbox_fields(self):
        checkbox_fields = []
        return checkbox_fields

    def get_global_checkbox_fields(self):
        if self.global_checkbox_fields is None:
            checkbox_fields = []
            customized_settings = (
                {
                    "code": "# encoding = utf-8\nimport splunk_ta_salesforce_declare\n\nimport logging\n\nimport sfdc_common as common\nfrom splunktaucclib.rest_handler import util\n\nutil.remove_http_proxy_env_vars()\n\n_DEFAULT_START_DATE = 90\n\n\ndef validate_input(helper, definition):\n    # Do not validate input because we cannot get all fields in input sometimes.\n    # For instance, if we add a stanza to inputs.conf, and one of the fields is\n    # raw text and need to encrypted, when modular input process start, it will\n    # read input through UCC and UCC will auto-encrypt this field. The problem is\n    # UCC will only submit this field, and then Splunk validation triggered. Only\n    # one field passed here.\n    pass\n\n\ndef _format_query(task):\n    \"\"\"Build and quote the query string\"\"\"\n    task.add_preprocess_handler(\n        'build_query',\n        ['{{is_greater_than}}', '{{object}}', '{{object_fields}}', '{{order_by}}', '{{limit}}', '{{start_date}}'],\n        'query_string'\n    )\n    task.add_preprocess_handler('log', [logging.DEBUG, 'Query SOQL={{query_string}}'])\n    task.add_preprocess_handler('quote', ['{{query_string}}'], 'query_string')\n\n\ndef _fix_source_and_sourcetype(task):\n    \"\"\"Fix source to sfdc_object://<object> and sourcetype to sfdc:<object>\"\"\"\n    task.add_postprocess_handler('set_var', ['sfdc_object://{{object}}'], 'source')\n    task.add_postprocess_handler('set_var', ['sfdc:{{object.lower()}}'], 'sourcetype')\n\n\ndef _stream_events(task):\n    # Add timestamp for each record\n    task.add_postprocess_handler(\n        'convert_records_to_events',\n        ['{{records}}', '{{order_by}}', '{{index}}', '{{host}}', '{{source}}', '{{sourcetype}}'],\n        'splunk_events'\n    )\n    task.add_postprocess_handler('std_output', ['{{splunk_events}}'])\n    task.add_postprocess_handler('log', [logging.DEBUG, '{{records|count}} events collected'])\n\n\ndef _configure_checkpoint(task):\n    task.configure_checkpoint(\n        name='{{name}}',\n        content={\n            'start_date': '{{start_date}}',\n            'is_greater_than': '{{is_greater_than}}'\n        }\n    )\n\n\ndef list_objects(task_config, meta_config):\n    task = common.get_sfdc_task_template('ListRecords', task_config, meta_config)\n    task.set_iteration_count(0)\n    _configure_checkpoint(task)\n    common.check_login_result(task)\n    _fix_source_and_sourcetype(task)\n\n    task.add_preprocess_handler('exit_if_true', [\"{{finished and finished.lower() == 'true'}}\"])\n\n    _format_query(task)\n\n    task.add_postprocess_handler('json_path', ['{{__response__.body}}', 'records'], 'records')\n    task.add_postprocess_handler('json_path', ['{{records}}', '[-1].{{order_by}}'], 'new_start_date')\n    task.add_postprocess_handler('set_var', ['{{not records}}'], 'finished')\n\n    # Filter records which timestamp is not the last timestamp\n    task.add_postprocess_handler(\n        'filter_records_before_date',\n        ['{{is_greater_than}}', '{{records}}', '{{order_by}}', '{{new_start_date}}'], 'records'\n    )\n    _stream_events(task)\n    task.add_postprocess_handler(\n        'set_var',\n        [\"{{false if is_greater_than.lower() == 'true' and finished.lower() == 'false' else true}}\"],\n        'is_greater_than'\n    )\n    task.add_postprocess_handler('set_var', ['{{new_start_date or start_date}}'], 'start_date')\n    return task\n\n\ndef collect_events(helper, ew):\n    \"\"\"Collect events\"\"\"\n    stanza_name = helper.get_input_stanza_names()\n    logger = common.setup_logger(stanza_name, helper.get_log_level())\n    logger.info('Collecting events started.')\n\n    task_config = helper.get_input_stanza(stanza_name)\n    if not task_config.get('account'):\n        logger.warning('Salesforce account is not configured fully. Add-on is going to exit.')\n        return\n\n    meta_config = helper._input_definition.metadata\n    meta_config['checkpoint_dir'] = common.reset_checkpoint_dir(\n        meta_config['checkpoint_dir'], task_config['name'], logger\n    )\n    # Fix start date and limit if not filled or invalid\n    start_date = common.fix_start_date(\n        task_config.get('start_date'), _DEFAULT_START_DATE, logger\n    )\n    limit = common.fix_limit(task_config.get('limit'), logger)\n\n    task_config.update({\n        'appname': helper.get_app_name(),\n        'stanza_name': stanza_name,\n        'start_date': start_date,\n        'limit': limit,\n        'is_greater_than': 'true',\n    })\n    tasks = (common.login_sfdc(), list_objects(task_config, meta_config))\n    common.run_tasks(tasks, ctx=task_config, proxy=helper.proxy)\n\n    logger.info('Collecting events finished.')\n",  # noqa: E501
                    "parameters": [
                        {
                            "required": True,
                            "possible_values": [],
                            "label": "Salesforce Account",
                            "type": "global_account",
                            "default_value": "",
                            "format_type": "global_account",
                            "placeholder": "",
                            "value": "",
                            "name": "account",
                            "help_string": "",
                        },
                        {
                            "required": True,
                            "possible_values": [
                                {
                                    "label": "Production",
                                    "value": "login.salesforce.com",
                                },
                                {
                                    "label": "Sandbox",
                                    "value": "test.salesforce.com",
                                },
                            ],
                            "label": "Salesforce Environment",
                            "type": "dropdownlist",
                            "default_value": "",
                            "format_type": "dropdownlist",
                            "placeholder": "",
                            "value": "",
                            "name": "endpoint",
                            "help_string": "",
                        },
                        {
                            "required": False,
                            "type": "password",
                            "label": "Security Token",
                            "value": "",
                            "default_value": "",
                            "format_type": "password",
                            "help_string": "Enter the Salesforce security token.",
                            "name": "token",
                            "placeholder": "",
                        },
                        {
                            "required": True,
                            "type": "text",
                            "label": "Object",
                            "value": "",
                            "default_value": "",
                            "format_type": "text",
                            "help_string": "The name of the object to query for.",
                            "name": "object",
                            "placeholder": "",
                        },
                        {
                            "required": True,
                            "type": "text",
                            "label": "Object Fields",
                            "value": "",
                            "default_value": "",
                            "format_type": "text",
                            "help_string": (
                                "Object fields from which to collect data. "
                                "Delimit multiple fields using comma (,)."
                            ),
                            "name": "object_fields",
                            "placeholder": "",
                        },
                        {
                            "required": True,
                            "type": "text",
                            "label": "Order By",
                            "value": "LastModifiedDate",
                            "default_value": "LastModifiedDate",
                            "format_type": "text",
                            "help_string": (
                                "The datetime field by which to query "
                                "results in ascending order for indexing."
                            ),
                            "name": "order_by",
                            "placeholder": "LastModifiedDate",
                        },
                        {
                            "required": False,
                            "type": "text",
                            "label": "Query Start Date",
                            "value": "",
                            "default_value": "",
                            "format_type": "text",
                            "help_string": (
                                "The datetime after which to query and index records, in this format: "
                                '"YYYY-MM-DDThh:mm:ss.000z".\nDefaults to 90 days earlier from now.'
                            ),
                            "name": "start_date",
                            "placeholder": "",
                        },
                        {
                            "required": False,
                            "type": "text",
                            "label": "Limit",
                            "value": "1000",
                            "default_value": "1000",
                            "format_type": "text",
                            "help_string": "The maximum number of results returned by the query.",
                            "name": "limit",
                            "placeholder": "1000",
                        },
                    ],
                    "sourcetype": "sfdc:object",
                    "data_inputs_options": [
                        {
                            "description": "",
                            "possible_values": [],
                            "type": "customized_var",
                            "required_on_create": True,
                            "format_type": "global_account",
                            "name": "account",
                            "title": "Salesforce Account",
                            "placeholder": "",
                            "required_on_edit": False,
                            "default_value": "",
                        },
                        {
                            "description": "",
                            "possible_values": [
                                {
                                    "label": "Production",
                                    "value": "login.salesforce.com",
                                },
                                {
                                    "label": "Sandbox",
                                    "value": "test.salesforce.com",
                                },
                            ],
                            "type": "customized_var",
                            "required_on_create": True,
                            "format_type": "dropdownlist",
                            "name": "endpoint",
                            "title": "Salesforce Environment",
                            "placeholder": "",
                            "required_on_edit": False,
                            "default_value": "",
                        },
                        {
                            "description": "Enter the Salesforce security token.",
                            "type": "customized_var",
                            "required_on_create": False,
                            "format_type": "password",
                            "required_on_edit": False,
                            "title": "Security Token",
                            "placeholder": "",
                            "name": "token",
                            "default_value": "",
                        },
                        {
                            "description": "The name of the object to query for.",
                            "type": "customized_var",
                            "required_on_create": True,
                            "format_type": "text",
                            "required_on_edit": False,
                            "title": "Object",
                            "placeholder": "",
                            "name": "object",
                            "default_value": "",
                        },
                        {
                            "description": (
                                "Object fields from which to collect data. "
                                "Delimit multiple fields using comma (,)."
                            ),
                            "type": "customized_var",
                            "required_on_create": True,
                            "format_type": "text",
                            "required_on_edit": False,
                            "title": "Object Fields",
                            "placeholder": "",
                            "name": "object_fields",
                            "default_value": "",
                        },
                        {
                            "description": (
                                "The datetime field by which to query results "
                                "in ascending order for indexing."
                            ),
                            "type": "customized_var",
                            "required_on_create": True,
                            "format_type": "text",
                            "required_on_edit": False,
                            "title": "Order By",
                            "placeholder": "LastModifiedDate",
                            "name": "order_by",
                            "default_value": "LastModifiedDate",
                        },
                        {
                            "description": (
                                "The datetime after which to query and index records, in this format: "
                                '"YYYY-MM-DDThh:mm:ss.000z".\nDefaults to 90 days earlier from now.'
                            ),
                            "type": "customized_var",
                            "required_on_create": False,
                            "format_type": "text",
                            "required_on_edit": False,
                            "title": "Query Start Date",
                            "placeholder": "",
                            "name": "start_date",
                            "default_value": "",
                        },
                        {
                            "description": "The maximum number of results returned by the query.",
                            "type": "customized_var",
                            "required_on_create": False,
                            "format_type": "text",
                            "required_on_edit": False,
                            "title": "Limit",
                            "placeholder": "1000",
                            "name": "limit",
                            "default_value": "1000",
                        },
                    ],
                    "interval": "120",
                    "streaming_mode_xml": True,
                    "is_loaded": True,
                    "title": "Salesforce Object",
                    "description": "",
                    "type": "customized",
                    "use_external_validation": True,
                    "index": "default",
                    "customized_options": [
                        {"value": "", "name": "account"},
                        {"value": "", "name": "endpoint"},
                        {"value": "", "name": "token"},
                        {"value": "", "name": "object"},
                        {"value": "", "name": "object_fields"},
                        {"value": "LastModifiedDate", "name": "order_by"},
                        {"value": "", "name": "start_date"},
                        {"value": "1000", "name": "limit"},
                    ],
                    "sample_count": 0,
                    "uuid": "0ca98b4834434221907903895bac3b53",
                    "name": "sfdc_object",
                }
                .get("global_settings", {})
                .get("customized_settings", [])
            )
            for global_var in customized_settings:
                if global_var.get("type", "") == "checkbox":
                    checkbox_fields.append(global_var["name"])
            self.global_checkbox_fields = checkbox_fields
        return self.global_checkbox_fields


if __name__ == "__main__":
    exitcode = ModInputsfdc_object().run(sys.argv)
    sys.exit(exitcode)
