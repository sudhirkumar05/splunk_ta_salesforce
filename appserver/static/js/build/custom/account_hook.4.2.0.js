var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e)},e={};function n(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function o(t){for(var e=1;e<arguments.length;e++){var o=null!=arguments[e]?arguments[e]:{};e%2?n(Object(o),!0).forEach((function(e){a(t,e,o[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(o)):n(Object(o)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(o,e))}))}return t}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){for(var n=0;n<e.length;n++){var o=e[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}t.d(e,{Z:()=>i});const i=function(){function t(e,n,o,a,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.globalConfig=e,this.serviceName=n,this.state=o,this.mode=a,this.util=r,this._debouncedCustomEndpointChange=this.debounce(this._customEndpointChange.bind(this),200)}var e,n;return e=t,(n=[{key:"onCreate",value:function(){}},{key:"debounce",value:function(t,e){var n;return function(){for(var o=arguments.length,a=new Array(o),r=0;r<o;r++)a[r]=arguments[r];clearTimeout(n),n=setTimeout((function(){t.apply(void 0,a)}),e)}}},{key:"onChange",value:function(t,e,n){"custom_endpoint"===t&&this._debouncedCustomEndpointChange(n)}},{key:"onRender",value:function(){var t=this.state.data.endpoint.value;"login.salesforce.com"===t||"test.salesforce.com"===t?this.util.setState((function(e){var n=o({},e.data);return n.custom_endpoint.value=t,{data:n}})):null!=t&&(this.util.setState((function(t){var e=o({},t.data);return e.custom_endpoint.value="other",{data:e}})),this._customEndpointChange(this.state))}},{key:"onSave",value:function(t){var e=t.custom_endpoint;return"login.salesforce.com"!==e&&"test.salesforce.com"!==e||this.util.setState((function(t){var n=o({},t.data);return n.endpoint.value=e,{data:n}})),!0}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}},{key:"_customEndpointChange",value:function(t){"other"===t.data.custom_endpoint.value?this.util.setState((function(t){var e=o({},t.data);return e.endpoint.display=!0,{data:e}})):this.util.setState((function(t){var e=o({},t.data);return e.endpoint.display=!1,{data:e}}))}}])&&r(e.prototype,n),t}();var u=e.Z;export{u as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,